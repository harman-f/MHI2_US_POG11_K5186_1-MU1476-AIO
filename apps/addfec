#!/bin/sh

revision="add FEC's v0.2.0 (2022-07-09 by Duke, MIBonk & MIB-Wiki)"
# use --help for more info

export PATH=:/proc/boot:/sbin:/bin:/usr/bin:/usr/sbin:/net/mmx/bin:/net/mmx/usr/bin:/net/mmx/usr/sbin:/net/mmx/sbin:/net/mmx/mnt/app/armle/bin:/net/mmx/mnt/app/armle/sbin:/net/mmx/mnt/app/armle/usr/bin:/net/mmx/mnt/app/armle/usr/sbin
export LD_LIBRARY_PATH=/net/mmx/mnt/app/root/lib-target:/net/mmx/mnt/eso/lib:/net/mmx/eso/lib:/net/mmx/mnt/app/usr/lib:/net/mmx/mnt/app/armle/lib:/net/mmx/mnt/app/armle/lib/dll:/net/mmx/mnt/app/armle/usr/lib
export IPL_CONFIG_DIR=/etc/eso/production

thisname="$(basename $0)"
thisdir="$(dirname $0)"

if [ -z $LOG ]; then
	. $thisdir/../config/GLOBALS
	echo -ne "\n$ME-$thisname---->\n" >> $LOG
fi

if [ -f $TMP/reboot.mib ]; then
	echo "Reboot running..."
	return 2> /dev/null
fi


if [ -f $VOLUME/common/tools/addFecs.txt ];then
	echo -ne "AIO detected\n" | $TEE -a $LOG
	addFec=$VOLUME/common/tools/addFecs.txt
else
	addFec=$thisdir/../patches/$TRAINVERSION"_"$MUVERSION"_PATCH"/addFecs.txt
fi

#-----------------------------------------------------------------------------

ParseFecs ()
{
		#TODO add check if FecContainer.fec is 0 byte; in that case addFec will not work
	if [ -f $BACKUPFOLDER/FEC/FecContainer.fec ];then
		$XXD -u -p -c 99999 $BACKUPFOLDER/FEC/FecContainer.fec > $TMP/FecContainer.tmp
		VCRNVIN=$($DD if=$TMP/FecContainer.tmp skip=14 bs=2 count=23 2> /dev/null)
		echo -ne "\nadd FECs to FEC file from M.I.B backup folder\n" | $TEE -a $LOG
	elif [ -f /net/rcc/mnt/efs-persist/FEC/FecContainer.fec ]; then
		$XXD -u -p -c 99999 /net/rcc/mnt/efs-persist/FEC/FecContainer.fec > $TMP/FecContainer.tmp
		VCRNVIN=$($DD if=$TMP/FecContainer.tmp skip=14 bs=2 count=23 2> /dev/null)
		echo -ne "\nadd FECs to FEC File from /net/rcc/mnt/efs-persist/FEC\n" | $TEE -a $LOG
	elif [ -f /net/rcc/mnt/efs-system/backup/FEC/FecContainer.fec ]; then
		$XXD -u -p -c 99999 /net/rcc/mnt/efs-system/backup/FEC/FecContainer.fec > $TMP/FecContainer.tmp
		VCRNVIN=$($DD if=$TMP/FecContainer.tmp skip=14 bs=2 count=23 2> /dev/null)
		echo -ne "\nadd FECs to FEC File from /net/rcc/mnt/efs-system/backup/FEC\n" | $TEE -a $LOG
	else
		echo -ne "\nno FEC File found, create own one now!\n" | $TEE -a $LOG
		CreateFec
	fi

	FecCheck=$($DD if=$TMP/FecContainer.tmp skip=8 bs=2 count=2 2> /dev/null)
	if [[ $FecCheck -ne 1102 ]] && [[ $FecCheck -ne 1107 ]]; then
		rm $TMP/FecContainer.tmp
		CreateFec
	fi

	Pointer=0
	FecsParsed=0
	FECCOUNTHEX=$($DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=1 2> /dev/null)
	FECCOUNTDEC=$(echo $((0x$FECCOUNTHEX)))
	((Pointer=Pointer+8))
	while [ $FECCOUNTDEC -ne 0 ]; do
		ParseFecContainer
		((FecsParsed=FecsParsed+1))
	done
}

ParseFecContainer ()
{
	if [[ $($DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=2 2> /dev/null) = "1102" ]]; then
		ParseSingleFec
	elif [[ $($DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=2 2> /dev/null) = "1107" ]]; then
		ParseMultiFec
	else
		FECCOUNTDEC=0
		FECCOUNTHEX=$(echo "ibase=10;obase=16;$FecsParsed" | $BC)
	fi
}

ParseSingleFec ()
{
	((Pointer=Pointer+2))
	if [ -f $TMP/installedFecs.tmp ]; then
		echo -n , >> $TMP/installedFecs.tmp
	fi
	$DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=4 >> $TMP/installedFecs.tmp 2> /dev/null
	((Pointer=Pointer+193))
	((FECCOUNTDEC=FECCOUNTDEC-1))
}

ParseMultiFec ()
{
	((Pointer=Pointer+34))
	FecAmountHEX=$($DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=1 2> /dev/null)
	FecAmountDEC=$(echo $((0x$FecAmountHEX)))
	FecLength=$((FecAmountDEC*4))
	((Pointer=Pointer+1))
	while [ $FecAmountDEC -ne 0 ]; do
		if [ -f $TMP/installedFecs.tmp ]; then
			echo -n , >> $TMP/installedFecs.tmp
		fi
	$DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=4 >> $TMP/installedFecs.tmp 2> /dev/null
	((Pointer=Pointer+4))
	((FecAmountDEC=FecAmountDEC-1))
	done
	((Pointer=Pointer+148+FecLength))
	((FECCOUNTDEC=FECCOUNTDEC-1))
}

CreateFec ()
{
	FECCOUNTHEX=0
	VCRN=03FFFFFFFFFF
	VIN=$VINCAR
	if [ -z "$VIN" ]; then
		VIN=$(cat $TMP/VIN.txt 2> /dev/null | grep VIN | $SED 's/VIN: //g' | $SED -e 's|["'\'']||g' | $SED 's/\r//')
	fi
	if [ -z "$VIN" ]; then
		 VIN=MIB123456789MAGIC
	fi
	VIN=$(echo -ne $VIN | $XXD -u -p -s 0 -l 17)
	VCRNVIN=$VCRN$VIN
	$SED 's/\r//g' $thisdir/../patches/$TRAINVERSION"_"$MUVERSION"_PATCH"/addFecs.txt > /tmp/addFecs.txt
	read -r FEC < /tmp/addFecs.txt
	BuildFec
	$XXD -u -p -c 99999 $TMP/AddedFecs.tmp > $TMP/Fec.tmp
	echo -n "01000000" >> $TMP/FecContainer.tmp
	cat $TMP/Fec.tmp >> $TMP/FecContainer.tmp
	rm $TMP/Fec.tmp
	rm $TMP/AddedFecs.tmp
}

BuildFec ()
{
	FECCOUNTHEX=$(echo "obase=ibase=16; $FECCOUNTHEX +1" | $BC)
	while [ ${#FECCOUNTHEX} -lt 2 ]; do
		FECCOUNTHEX="0"$FECCOUNTHEX
	done
	Date=$(on -f rcc date -t 2> /dev/null)
	Epoch=$(echo -n "obase=16; ibase=10; $Date" | $BC)
	while [ ${#Epoch} -lt 8 ]; do
		Epoch="0"$Epoch
	done
	while [ ${#SIGNATURE} -ne 256 ]; do
		SIGNATURE="FF"$SIGNATURE
	done
	while [ ${#VCRNVIN} -ne 46 ]; do
		VCRNVIN=$VCRNVIN"20"
	done
	FECu=$(echo -n $FEC | $XXD -r -p | $DD conv=swab 2> /dev/null | $XXD -p -l 2)
	FECl=$(echo -n $FEC | $XXD -r -p | $DD conv=swab 2> /dev/null | $XXD -p -l 2 -s 2)
	FECLE=$FECl$FECu
	echo -n "AB0000001102"$FEC$VCRNVIN"00"$Epoch"000000000000000000"$SIGNATURE"01000000"$FECLE"0100000003000000FF000000" | $XXD -r -p >> $TMP/AddedFecs.tmp

}

BuildFecContainer ()
{
touch $TMP/AddedFecs.tmp
	ParseFecs
	if [ -f $addFec ];then
		while read FEC; do
			FECCOUNT=$(echo $((0x$FECCOUNTHEX)))
			grep -iq $FEC $TMP/installedFecs.tmp
			FecNotPresent=$(echo $?)
			(( 16#$FEC )) > /dev/null 2>&1
			FecIsHex=$(echo $?)
			if [[ $FecIsHex -eq 0 ]] && [[ ${#FEC} -eq 8 ]] && [[ $FecNotPresent -eq 1 ]] && [[ $FECCOUNT -le 254 ]]; then
				BuildFec
			fi
		done < $addFec
		if [ -f $TMP/AddedFecs.tmp ];then
			echo -n $FECCOUNTHEX"000000" | $XXD -r -p > $TMP/FecContainer.fec
			cat $TMP/AddedFecs.tmp >> $TMP/FecContainer.fec
			$DD if=$TMP/FecContainer.tmp skip=4 bs=2 2> /dev/null | $XXD -r -p >> $TMP/FecContainer.fec
			if [ -d $thisdir/../patches/$TRAINVERSION"_"$MUVERSION"_PATCH" ];then
				cp -rf $TMP/FecContainer.fec $thisdir/../patches/$TRAINVERSION"_"$MUVERSION"_PATCH"/FecContainer.fec
				echo -ne "FEC File build done!\n\n" | $TEE -a $LOG
			else
				echo -ne "no patch folder there, FEC File build is done in /tmp...\n\n" | $TEE -a $LOG
			fi
		else
			echo -ne "FEC File can not build, addFecs.txt is corrupt!\n\n" | $TEE -a $LOG
		fi
	else
		echo -ne "FEC File can not build, addFecs.txt is missing!\n\n" | $TEE -a $LOG
	fi
	rm $TMP/*.tmp
}

#-----------------------------------------------------------------------------

	case $1 in

-a) {

trap '' 2

BuildFecContainer

trap 2

return 2> /dev/null

};;

-l) {

trap '' 2

FECPOINTER ()
{
	Pointer=0
	FecsParsed=0
	FECCOUNTHEX=$($DD if=$TMP/FecContainer.tmp skip=$Pointer bs=2 count=1 2> /dev/null)
	FECCOUNTDEC=$(echo $((0x$FECCOUNTHEX)))
	((Pointer=Pointer+8))
	while [ $FECCOUNTDEC -ne 0 ]; do
		ParseFecContainer
		((FecsParsed=FecsParsed+1))
	done
}

echo -ne "FECs from /net/rcc/mnt/efs-persist/FEC\n" | $TEE -a $LOG
echo -ne "FECs currently used by unit\n"
rm $TMP/*.tmp 2> /dev/null
if [ -f /net/rcc/mnt/efs-persist/FEC/FecContainer.fec ]; then
	$XXD -u -p -c 99999 /net/rcc/mnt/efs-persist/FEC/FecContainer.fec > $TMP/FecContainer.tmp
	VCRNVIN=$($DD if=$TMP/FecContainer.tmp skip=14 bs=2 count=23 2> /dev/null)
	FECPOINTER
	ParseFecContainer
	FECLIST=$(echo $(cat $TMP/installedFecs.tmp))
	echo -ne $FECLIST | $SED -r 's/,/\n/g' 2> /dev/null
	echo -ne "\n\n"
	
else
	echo -ne "\nno FEC File found\n" | $TEE -a $LOG
fi

echo -ne "FECs from /net/rcc/mnt/efs-system/backup/FEC\n" | $TEE -a $LOG
echo -ne "FECs from factory\n"
rm $TMP/*.tmp 2> /dev/null
if [ -f /net/rcc/mnt/efs-system/backup/FEC/FecContainer.fec ]; then
	$XXD -u -p -c 99999 /net/rcc/mnt/efs-system/backup/FEC/FecContainer.fec > $TMP/FecContainer.tmp
	VCRNVIN=$($DD if=$TMP/FecContainer.tmp skip=14 bs=2 count=23 2> /dev/null)
	FECPOINTER
	ParseFecContainer
	FECLIST=$(echo $(cat $TMP/installedFecs.tmp))
	echo -ne $FECLIST | $SED -r 's/,/\n/g' 2> /dev/null
	echo -ne "\n\n"
else
	echo -ne "\nno FEC File found\n" | $TEE -a $LOG
fi

trap 2

return 2> /dev/null

};;

	# help or unknown parameter ------------------------------
	*) {
		echo ""
		echo $revision
		echo ""
		echo "Usage: "$thisname" [OPTION]"
		echo ""
		echo "Options:"
		echo "        -a 			add FECs"
		echo "        -l 			list installed FECs"
		echo "        --help			show this help"
		echo ""
		echo "Note: Backup will only work in RCC bash!"
		echo ""
		echo "This program is free software; you can redistribute it and/or"
		echo "modify it under the terms of the GNU General Public License"
		echo "as published by the Free Software Foundation; either version 2"
		echo "of the License, or (at your option) any later version."
		echo ""
		echo "This program is distributed in the hope that it will be useful,"
		echo "but WITHOUT ANY WARRANTY; without even the implied warranty of"
		echo "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
		echo "See the GNU General Public License for more details."
		echo ""
		echo "You should have received a copy of the GNU General Public License"
		echo "along with this program; if not, write to the Free Software Foundation,"
		echo "Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA."
		echo ""

};;

esac

exit 0
